
version: '1.0'
stages:
  - prepare
  - build
  - test
  - deploy
# services:
  # mongo_test_service:
    # image: mongo:latest
    # ports:
      # - 27017 
  # name: anchore-engine
  # composition: anchore
steps:
  main_clone:
    title: Cloning main repository...
    type: git-clone
    repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
    revision: '${{CF_REVISION}}'
    stage: prepare
  printenv:      
    title: Print env variables
    image: alpine
    stage: prepare
    commands:
      - env
#   upload:
    # title: Upload to Google Drive
    # type: google-drive-upload
    # stage: prepare
    # fail_fast: false
    # arguments:
      # USER_EMAIL: pavel.nosovet@codefresh.io
      # SERVICE_ACCOUNT_EMAIL: googledriveuploader@cf-test-260813.iam.gserviceaccount.com
      # UPLOAD_FILE_1:
        # - '${{CF_VOLUME_PATH}}/${{CF_REPO_NAME}}/Dockerfile'
        # - Dockerfile
        # - text/plain
      # UPLOAD_FILE_2:
        # - '${{CF_VOLUME_PATH}}/${{CF_REPO_NAME}}/Makefile'
        # - Makefile
#         - text/plain
  precheck:
    title: List ports
    image: codefresh/cli
    stage: prepare
    services:
      - anchore-engine
    commands:
      - env
      - curl localhost:8228 || true
      - curl http://anchore-engine:8228/v1 || true
      - apt update && apt install -y nmap
      - nmap -Pn localhost
 

  Build:
    type: parallel
    stage: build
    steps:
      BuildLatestAlpine:
        title: Building latest Alpine based Docker Image
        type: build
        image_name: simple-alpine-server
        working_directory: ./
        tag: "latest"
        dockerfile: Dockerfile
        when:
          branch:
            only:
              - master
      BuildLatestUbuntu:
        title: Building latest Ubuntu based Docker Image
        type: build
        image_name: simple-ubuntu-server
        working_directory: ./
        tag: "latest"
        dockerfile: Dockerfile.ubuntu
        when:
          branch:
            only:
              - master
      BuildDevAlpine:
        title: Building dev Alpine based Docker Image
        type: build
        image_name: simple-alpine-server
        working_directory: ./
        tag: "${{CF_BRANCH}}"
        dockerfile: Dockerfile
        when:
          branch:
            ignore:
              - master
      BuildDevUbuntu:
        title: Building dev Ubuntu based Docker Image
        type: build
        image_name: simple-ubuntu-server
        working_directory: ./
        tag: "${{CF_BRANCH}}"
        dockerfile: Dockerfile.ubuntu
        when:
          branch:
            ignore:
              - master
#   ScanAlpineImage:
    # title: Scanning Docker Image
    # type: palsoncf/anchore-plugin
    # stage: build
    # arguments:
      # ANCHORE_CLI_URL: http://anchore-engine:8228/v1
      # ANCHORE_CLI_IMAGE: '${{BuildLatestAlpine}}'
      # ANCHORE_FAIL_ON_POLICY: "true"
    # services:
#       - anchore-engine
  Push:
    type: parallel
    stage: build
    steps:
      PushLatestAlpine:
        type: push
        title: Push latest Alpine to Docker Hub
        description: Free text description
        candidate: ${{BuildLatestAlpine}}
        tag: "${{CF_SHORT_REVISION}}"
        image_name: palson/http-server
        registry: dockerhub
        stage: build
        when:
          branch:
            only:
              - master
      PushLatestUbuntu:
        type: push
        title: Push latest Ubuntu to Docker Hub
        description: Free text description
        candidate: ${{BuildLatestUbuntu}}
        tag: "${{CF_SHORT_REVISION}}"
        image_name: palson/http-server
        registry: dockerhub
        stage: build
        when:
          branch:
            only:
              - master
      PushDevAlpine:
        type: push
        title: Push dev Alpine to Docker Hub
        description: Free text description
        candidate: ${{BuildDevAlpine}}
        tag: "${{CF_SHORT_REVISION}}"
        image_name: palson/http-server
        registry: dockerhub
        stage: build
        when:
          branch:
            ignore:
              - master
      PushDevUbuntu:
        type: push
        title: Push dev Ubuntu to Docker Hub
        description: Free text description
        candidate: ${{BuildDevUbuntu}}
        tag: "${{CF_SHORT_REVISION}}"
        image_name: palson/http-server
        registry: dockerhub
        stage: build
        when:
          branch:
            ignore:
              - master
  Tests:
    type: parallel
    stage: test
    fail_fast: false
    steps:
      Successful:      
        title: Running successful tests
        image: '${{BuildLatestAlpine}}'
        commands:
          - env
      FailedTests:
        title: Running failed tests
        image: '${{BuildLatestAlpine}}'
        commands:
          - exit 1
    when:
      branch:
        only:
          - master
    on_success:
      metadata:
        set:
          - ${{BuildAlpine}}:
            - tests: passed

  StoreChart:
    title: Storing Helm chart
    stage: deploy
    image: 'codefresh/cfstep-helm:2.12.3'
    fail_fast: false
    environment:
      - ACTION=push
      - CHART_REF=charts/simple-server

#   DeployChart:
    # title: Deploying Helm chart
    # type: helm
    # stage: deploy
    # arguments:
      # CHART_NAME: '${{CHART_REF}}'
      # RELEASE_NAME: '${{RELEASE_NAME}}'
#       KUBE_CONTEXT: '${{KUBE_CONTEXT}}'

#     image: 'codefresh/cfstep-helm:2.12.3'
    # title: Deploying Helm chart
    # stage: deploy
    # environment:
      # - CHART_REF=charts/simple-server
      # - RELEASE_NAME=my-geo-chart-prod
      # - KUBE_CONTEXT=issue-66
      # - VALUE_image_pullPolicy=Always
      # - VALUE_image_tag='multi-stage'
#       - VALUE_replicaCount=3

#   Deploy:
    # title: deploying to cluster
    # stage: deploy
    # type: deploy
    # kind: kubernetes
    # cluster: issue-66
    # namespace: testserver
    # file_path: ./deployment.yml
    # candidate:
      # image: ${{BuildAlpine}}
      # registry: dockerhub
    # on_success:
      # annotations:
        # set:
          # - entity_id: default/test-pipeline
            # entity_type: pipeline
            # annotations:
            # - annotation_example: 0.0.8
            # - string_annotation: Test_String

